apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file([
        "node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"
    ].execute(null, rootDir).text.trim())
    reactNativeDir = new File([
        "node", "--print", "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File([
        "node", "--print", "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File([
        "node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"
    ].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile = new File([
        "node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"
    ].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    autolinkLibrariesWithApp()
}

def enableMinifyInReleaseBuilds = (findProperty('android.enableMinifyInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion = rootProject.ext.ndkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    compileSdk = rootProject.ext.compileSdkVersion

    namespace = 'com.anonymous.rescueapp'

    defaultConfig {
        applicationId = 'com.anonymous.rescueapp'
        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion
        versionCode = 1
        versionName = "1.0.0"
        buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"${findProperty('reactNativeReleaseLevel') ?: 'stable'}\""
    }

    signingConfigs {
        debug {
            storeFile = file('debug.keystore')
            storePassword = 'android'
            keyAlias = 'androiddebugkey'
            keyPassword = 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig = signingConfigs.debug
        }
        release {
            signingConfig = signingConfigs.debug
            shrinkResources = (findProperty('android.enableShrinkResourcesInReleaseBuilds') ?: 'false').toBoolean()
            minifyEnabled = enableMinifyInReleaseBuilds
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
            crunchPngs = (findProperty('android.enablePngCrunchInReleaseBuilds') ?: 'true').toBoolean()
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = (findProperty('expo.useLegacyPackaging') ?: 'false').toBoolean()
        }
    }

    androidResources {
        ignoreAssetsPattern = '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Fix deprecated property syntax for pickFirsts, excludes, merges, doNotStrip
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
    options = options.collect { it.trim() }.findAll { it }
    if (options.size() > 0) {
        options.each { android.packagingOptions[prop] += it }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:34.3.0')
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-storage'

    if ((findProperty('expo.gif.enabled') ?: "") == "true") {
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if ((findProperty('expo.webp.enabled') ?: "") == "true") {
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if ((findProperty('expo.webp.animated') ?: "") == "true") {
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Disable incremental Kotlin compilation on Windows (optional, fixes some compiler crashes)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.incremental = false
}
